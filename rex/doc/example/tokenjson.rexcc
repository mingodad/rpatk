/*
 * To build:
 * # rexcc tokenjs.rexcc -o tokenjs.c
 * # gcc -I/usr/include/rpatk -o tokenjs tokenjs.c
 *
 * To run:
 * # echo '{"project":"tokenjson", "version":1.0}' | ./tokenjson
 */

#include <stdio.h>
#include <wchar.h>
#include <locale.h>
#include "rex/rexdfa.h"

#define TOKEN_SELF 256
#define TOKEN_SPACE 257

#define TOKEN_STRING 261
#define TOKEN_INT 262
#define TOKEN_NUMBER 263
#define TOKEN_TRUE	264
#define TOKEN_FALSE 266
#define TOKEN_NULL 267
#define TOKEN_COMMA 268
#define TOKEN_COLON 269
#define TOKEN_LEFTSB 270
#define TOKEN_RIGHTSB 271
#define TOKEN_LEFTCB 272
#define TOKEN_RIGHTCB 273

%%
TOKEN_INT			-?[0-9]|-?[1-9][0-9]+
TOKEN_NUMBER		-?([1-9][0-9]*|0)([.][0-9]+)?(-?[eE][+\-]?[0-9]+)?
TOKEN_STRING		"([^"\\]|[\\](["\\bfnrt]|u[0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F]))*"
TOKEN_TRUE			true
TOKEN_FALSE			false
TOKEN_NULL			null
TOKEN_COMMA			[,]
TOKEN_COLON			[:]
TOKEN_LEFTSB		[\[]
TOKEN_RIGHTSB		[\]]
TOKEN_LEFTCB		[{]
TOKEN_RIGHTCB		[}]
TOKEN_SPACE			[\t\r\n ]+
%%

rexdfa_t *dfa = &ccdfa;


int get_token(wint_t *buffer, int size)
{
	rexdfss_t *acc_ss = NULL;
	rexuint_t nstate = REX_DFA_STARTSTATE;
	int ret = -1, i = 0;
	wint_t wc;
	
	while ((wc = fgetwc(stdin)) != WEOF) {
		REX_DFA_NEXT(dfa, nstate, wc, &nstate);
		if (nstate == REX_DFA_DEADSTATE) {
			ungetwc(wc, stdin);
			break;
		}
		if (i + 1 < size) {
			buffer[i++] = wc;
		}
		if (REX_DFA_STATE(dfa, nstate)->type == REX_STATETYPE_ACCEPT) {
			/*
			 * The DFA is in accepting state, lets find out what exactly is
			 * being accepted.
			 * The token ID is recorded in the substate's userdata
			 *
			 * Note: There are may be more than one accepting substate,
			 * but we only check the first one (at offset 0). A real implementation
			 * might need to check the rest of the accepting substates(and userdata)
			 * to decide which one to use.
			 *
			 * Note: We will not break out of the loop here. We will keep going
			 * in order to find the longest match.
			 */
			acc_ss = REX_DFA_ACCSUBSTATE(dfa, nstate, 0);
			ret = (int) acc_ss->userdata;
			if (ret == TOKEN_SELF)
				ret = wc;
		}
	}
	buffer[i++] = '\0';
	return ret;
}

int main(int argc, char *argv[])
{
	wint_t buffer[4000];
	int token;
	
	if (!setlocale(LC_ALL, "en_US.UTF8" )) {
		printf("Can not set the specified locale, please check LANG, LC_CTYPE, LC_ALL.\n");
		return 1;
	}
	while ((token = get_token(buffer, sizeof(buffer)/sizeof(buffer[0]))) > 0) {
		if (token != TOKEN_SPACE)
			fwprintf(stdout, L"token(%3d): %ls\n", token, buffer);
	}
	return 0;
}
