/*
 * To build:
 * # rexcc postfix.rexcc -o postfix.c
 * # gcc -I/usr/include/rpatk -o postfix postfix.c
 *
 * To run:
 * # echo "2+3-4" | ./postfix
 */

#include <stdio.h>
#include "rex/rexdfa.h"

#define TOKEN_SELF 256
#define TOKEN_TERM 257
#define TOKEN_SPACE 258

%%

TOKEN_TERM			[0-9]+
TOKEN_SPACE			[\t\r\n ]+
TOKEN_SELF			[\+\-]

%%


rexdfa_t *dfa = &ccdfa;


int get_token(char *buffer, int size)
{
	rexdfss_t *acc_ss = NULL;
	rexuint_t nstate = REX_DFA_STARTSTATE;
	int ret = -1, i = 0;
	int c;
	
	while ((c = fgetc(stdin)) != EOF) {
		REX_DFA_NEXT(dfa, nstate, c, &nstate);
		if (nstate == REX_DFA_DEADSTATE) {
			ungetc(c, stdin);
			break;
		}
		if (i + 1 < size) {
			buffer[i++] = c;
		}
		if (REX_DFA_STATE(dfa, nstate)->type == REX_STATETYPE_ACCEPT) {
			/*
			 * The DFA is in accepting state, lets find out what exactly is
			 * being accepted.
			 * The token ID is recorder in the substate's userdata
			 *
			 * Note: There are may be more than one accepting substate,
			 * but we only check the first one (at offset 0). A real implementation
			 * might need to check the rest of the accepting substates(and userdata)
			 * to decide which one to use.
			 *
			 * Note: Some of the conflicts might be resolved simply be reordering
			 * the regular expressions. For example TOKEN_KEYWORD such as 
			 * 'while', 'if', etc. also match TOKEN_IDENTIFIER, but because
			 * TOKEN_KEYWORD appears before TOKEN_IDENTIFIER it is placed first.
			 *
			 * Note: We will not break out of the loop here. We will keep going
			 * in order to find the longest match.
			 */
			acc_ss = REX_DFA_ACCSUBSTATE(dfa, nstate, 0);
			ret = (int) acc_ss->userdata;
			if (ret == TOKEN_SELF)
				ret = c;
		}
	}
	buffer[i++] = '\0';
	return ret;
}

#include "parser.c"
